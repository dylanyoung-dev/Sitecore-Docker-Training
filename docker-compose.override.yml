version: "2.4"

services:
  # A servercore image with both the netcore and netframework SDKs.
  # See Dockerfile for more details.
  dotnetsdk:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
    build:
      context: ./docker/build/dotnetsdk
      args:
        BASE_IMAGE: 
    scale: 0

  # The solution build image is added here so it can be referenced as a build dependency
  # for the images which use its output. Setting "scale: 0" means docker-compose will not
  # include it in the running environment. See Dockerfile for more details.
  solution:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
    build:
      context: .
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
        BUILD_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
    depends_on:
      - dotnetsdk
    scale: 0

  traefik:
    volumes:
      - ./docker/traefik:C:/etc/traefik
    depends_on:
      - cm

  mssql:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xp0-mssql:${VERSION:-latest}
    build:
      context: ./docker/build/mssql
      args:
        HRZ_IMAGE: ${SITECORE_DOCKER_MODULES_REGISTRY}horizon-integration-xp0-assets:2.26.0-1809
        SITECRON_IMAGE: sitecoremaster/sitecore-sitecron:3.2.0-10.1-1809
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-mssql:${SITECORE_VERSION}
    volumes:
      - ${LOCAL_DATA_PATH}\mssql:c:\data
    mem_limit: ${MEM_LIMIT_SQL:-2GB}
    restart: always

  solr:
    volumes:
      - ${LOCAL_DATA_PATH}\solr:c:\data
    mem_limit: ${MEM_LIMIT_SOLR:-1GB}
    restart: always

  id:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-id:${VERSION:-latest}
    build:
      context: ./docker/build/id
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-id:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      Sitecore_Sitecore__IdentityServer__Clients__DefaultClient__AllowedCorsOrigins__AllowedCorsOriginsGroup2: https://${HRZ_HOST}
  cm:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xp0-cm:${VERSION:-latest}
    build:
      context: ./docker/build/cm
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-cm:${SITECORE_VERSION}
        TOOLING_IMAGE: ${TOOLS_IMAGE}
        SITECRON_IMAGE: sitecoremaster/sitecore-sitecron:3.2.0-10.1-1809
        HRZ_IMAGE: ${SITECORE_DOCKER_MODULES_REGISTRY}horizon-integration-xp0-assets:2.26.0-1809
        #SOLUTION_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
    depends_on:
      - solution
    volumes:
      - ${LOCAL_DEPLOY_PATH}\platform:C:\deploy
      - ${LOCAL_DATA_PATH}\cm:C:\inetpub\wwwroot\App_Data\logs
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      Sitecore_Horizon_ClientHost: https://${HRZ_HOST}
    entrypoint: powershell -Command "& C:\tools\entrypoints\iis\Development.ps1"
    mem_limit: ${MEM_LIMIT_CM:-4GB}
    restart: always

  hrz:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}sitecore-horizon:${VERSION:-latest}
    build:
      context: ./docker/build/hrz
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_MODULES_REGISTRY}sitecore-horizon:${HRZ_VERSION}
    isolation: ${ISOLATION}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz/live"]
      timeout: 300s
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      Sitecore_FederatedUI__HostBaseUrl: http://hrz
      Sitecore_SitecorePlatform__ContentManagementUrl: https://${CM_HOST}
      Sitecore_SitecorePlatform__ContentManagementInternalUrl: http://cm
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__RequireHttpsMetadata: 'false'
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__Authority: https://${ID_HOST}
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__CallbackAuthority: https://${HRZ_HOST}
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__InternalAuthority: http://id
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__Authority: https://${ID_HOST}
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__InternalAuthority: http://id
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__RequireHttpsMetadata: 'false'
    depends_on:
      id:
        condition: service_started
      cm:
        condition: service_started
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
      - "traefik.http.routers.sh-secure.entrypoints=websecure"
      - "traefik.http.routers.sh-secure.rule=Host(`${HRZ_HOST}`)"
      - "traefik.http.routers.sh-secure.tls=true"
      - "traefik.http.routers.sh-secure.middlewares=force-STS-Header"
      - "traefik.http.services.sh.loadbalancer.server.port=80"

  xconnect:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xp0-xconnect:${VERSION:-latest}
    build:
      context: ./docker/build/xconnect
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-xconnect:${SITECORE_VERSION}
        #SOLUTION_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}        
        TOOLS_IMAGE: ${TOOLS_IMAGE}
    environment: 
      SITECORE_LICENSE_LOCATION: C:\license
    depends_on:
      - solution      
    volumes:
      - ${HOST_LICENSE_FOLDER}:C:\license
      #- ${LOCAL_DEPLOY_PATH}\xconnect:C:\deploy
    entrypoint: powershell -Command "& C:\tools\entrypoints\iis\Development.ps1"

  xdbsearchworker:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xp0-xdbsearchworker:${VERSION:-latest}
    build:
      context: ./docker/build/xdbsearchworker
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-xdbsearchworker:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\

  xdbautomationworker:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xp0-xdbautomationworker:${VERSION:-latest}
    build:
      context: ./docker/build/xdbautomationworker
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-xdbautomationworker:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\

  cortexprocessingworker:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xp0-cortexprocessingworker:${VERSION:-latest}
    build:
      context: ./docker/build/cortexprocessingworker
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-cortexprocessingworker:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\